Prompt: Help me to build decentralized voting platform with React framework on Cursor IDE. 

Create a new React project:
npx create-react-app decentralized-voting --template typescript
cd decentralized-voting

Install necessary dependencies:
npm install ethers web3 @openzeppelin/contracts dotenv react-bootstrap

2. Design the Smart Contract
The voting smart contract will handle:

Proposal creation.
Voting by token holders.
Proposal result calculation.
Compile and deploy the contract using Hardhat or Remix IDE.

Deploy the Smart Contract
Install Hardhat
npm install --save-dev hardhat
npx hardhat

Write a deployment script (scripts/deploy.js)
const hre = require("hardhat");

async function main() {
    const Voting = await hre.ethers.getContractFactory("Voting");
    const proposals = ["Proposal 1", "Proposal 2", "Proposal 3"];
    const voting = await Voting.deploy(proposals);
    await voting.deployed();
    console.log("Voting deployed to:", voting.address);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });


Deploy the contract to a testnet (e.g., Goerli)
npx hardhat run scripts/deploy.js --network goerli

4. Build the React Frontend
Structure the React App:

